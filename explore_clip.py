# -*- coding: utf-8 -*-
"""explore-clip.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WF90swuULWso-uZSPt3sEWX_vY0Mnk_Z
"""

!pip install git+https://github.com/openai/CLIP.git

import torch
import clip
import glob
from PIL import Image
import numpy as np
import pandas as pd
import torch.nn as nn
import os
import IPython.display as display
import itertools
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)

#Load all the images into an array
images = []
dataset_folder = './test'
for root, dirs, files in os.walk(dataset_folder):
    for file in files:
        if file.endswith('jpg'):
            images.append(  root  + '/'+ file)
text = clip.tokenize(['a tall man in an orange hoodie with black jeans and specs with a clock, chair, and whiteboard behind him.']).to(device)
text_features = model.encode_text(text)
#print(text_features)
result = {}
cos = torch.nn.CosineSimilarity(dim=0)
#For each image, compute its cosine similarity with the prompt and store the result in a dict
for img in images:
    with torch.no_grad():
        image_preprocess = preprocess(Image.open(img)).unsqueeze(0).to(device)
        image_features = model.encode_image( image_preprocess)
        # print(image_features)

        sim = cos(image_features[0],text_features[0]).item()
        # print(image_features[0].shape, text_features[0].shape)
        print(img, sim)
        sim = (sim+1)/2
        result[img]=sim

#Sort the dict and retrieve the first 3 values
sorted_value = sorted(result.items(), key=lambda x:x[1], reverse=True)
sorted_res = dict(sorted_value)
top = dict(itertools.islice(sorted_res.items(), 2))

num_images = len(top)
# Set up the subplot grid
fig, axs = plt.subplots(1, num_images, figsize=(15, 5))

# Iterate through image paths and plot each image
for i, path in enumerate(top):
    img = mpimg.imread(path)
    axs[i].imshow(img)
    axs[i].axis('off')  # Turn off axis labels for better visualization

plt.show()

